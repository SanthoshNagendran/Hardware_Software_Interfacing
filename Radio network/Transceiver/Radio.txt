#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>
#include <ctype.h>

#include "common.h"


/** LED should be on */
#define ON  1
/** LED should be off */
#define OFF 0
/** Function should loop for 0 seconds */
#define SEK_0  0
/** Function should loop for aprox 1 seconds */
#define SEK_1 10
/** Function should loop for aprox 2 seconds */
#define SEK_2 20
/** Function should loop for aprox 3 seconds */
#define SEK_3 30

#define TIMER1_OVERFLOW() (TF1 == 1)   /**< Checks for overflow on timer1 */

#define MAX_RUNTIME 65 /** The maximum runtime in ms that a timer might run. Calculated by 
 * taking the maximum number your timer might take and divide that by
 * @b CYCLES_PR_MS. On the nRF24L01 evaluation kit this is 0xFFFF / 1000 = 
 * 65 (aprox).
 */
#define MAX_TIME (0 - MAX_RUNTIME * CYCLES_PR_MS) /** This constant defines the value the timer should be set to for running for
 * the maximum time.
 */
/** Start timer1. */
#define T1_START() do{  TR1 = 1; \
                        ET1 = 0; \
                        TF1 = 0; \
                        EA  = 1; \
                        }while(0)
/** Stop timer1. */
#define T1_STOP() do{ TR1 = 0; \
                      ET1 = 0; \
                      }while(0)


/** Initialise Timer 1 in mode 1 (16-bit timer) */
#define T1_MODE1() (TMOD |= 0x10)
/** Sets the low bit of timer 1 */
#define T1_SET_LB(x) (TL1 = x)
/** Sets the high bit of timer 1 */
#define T1_SET_HB(x) (TH1 = x)

#define RADIO_ACTIVITY() (IE0 == 1) /**< The register on the radio indicating 
                                     * activity on the radio */

/** How to reset the activity register */
#define RESET_RADIO_ACTIVITY() (IE0 = 0)

/** Tx side System setup */
SPI_HandleTypeDef hspi1;

UART_HandleTypeDef huart2;

/** Tx side System setup end */

/* Private function prototypes for Radio -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_USART2_UART_Init(void);
/* Private function prototypes for Radio ends -----------------------------------------------*/

int pinState1=1,pinState2=1,pinState3=1;
static uint8_t timer_rounds;
static radio_status_t status;
static xdata uint8_t pload_sb[RF_PAYLOAD_LENGTH];

typedef enum {
  DEVICE_IDLE = 0, /**< The device is idle */
  DEVICE_PRX_IDLE, /**< The device will operate in @b PRX mode */
  DEVICE_PTX_IDLE, /**< The device will operate in @b PTX mode */
  DEVICE_PRX_SB,   /**< The device will operate in @b PRX mode with ShockBurst functionailty */
  DEVICE_PRX_ESB,  /**< The device will operate in @b PRX mode with Enhanced ShockBurst functionailty */
  DEVICE_PRX_PL,   /**< The device will operate in @b PRX mode with Enhanced ShockBurst functionailty with Bidirectional data */
  DEVICE_PTX_SB,   /**< The device will operate in @b PTX mode with ShockBurst functionailty */
  DEVICE_PTX_ESB,  /**< The device will operate in @b PTX mode with Enhanced ShockBurst functionailty */
  DEVICE_PTX_PL,   /**< The device will operate in @b PTX mode with Enhanced ShockBurst functionailty with Bidirectional data */
  NO_CHANGE        /**< No state change */
} state_t;



static const state_t state_machine[][3] = 
// B1               B2               B3                 CURRENT STATE
{ {DEVICE_PTX_IDLE, DEVICE_PRX_IDLE, NO_CHANGE},      /**< DEVICE_IDLE */
  {DEVICE_PRX_SB,   DEVICE_PRX_ESB,  DEVICE_PRX_PL},  /**< DEVICE_PRX_IDLE */
  {DEVICE_PTX_SB,   DEVICE_PTX_ESB,  DEVICE_PTX_PL},  /**< DEVICE_PTX_IDLE */
  {NO_CHANGE,       NO_CHANGE,       NO_CHANGE},      /**< DEVICE_PRX_SB */
  {NO_CHANGE,       NO_CHANGE,       NO_CHANGE},      /**< DEVICE_PRX_ESB */
  {NO_CHANGE,       NO_CHANGE,       NO_CHANGE},      /**< DEVICE_PRX_PL */
  {NO_CHANGE,       NO_CHANGE,       NO_CHANGE},      /**< DEVICE_PTX_SB */
  {NO_CHANGE,       NO_CHANGE,       NO_CHANGE},      /**< DEVICE_PTX_ESB */
  {NO_CHANGE,       NO_CHANGE,       NO_CHANGE}       /**< DEVICE_PTX_PL */
};


static const uint8_t show_state[][5] = 
//LED1, LED2, LED3, ALL off after?, Time, 
{{ON ,  ON ,  ON ,  ON,             SEK_0},  /**< DEVICE_IDLE */
 {OFF,  OFF,  ON ,  ON,             SEK_0},  /**< DEVICE_PRX_IDLE */
 {OFF,  OFF,  OFF,  ON,             SEK_0},  /**< DEVICE_PTX_IDLE */
 {ON ,  OFF,  ON ,  OFF,            SEK_3},  /**< DEVICE_PRX_SB */
 {OFF,  ON ,  ON ,  OFF,            SEK_3},  /**< DEVICE_PRX_ESB */
 {ON ,  ON ,  ON ,  OFF,            SEK_3},  /**< DEVICE_PRX_PL */
 {ON ,  OFF,  OFF,  OFF,            SEK_3},  /**< DEVICE_PTX_SB */
 {OFF,  ON ,  OFF,  OFF,            SEK_3},  /**< DEVICE_PTX_ESB */
 {ON ,  ON ,  OFF,  OFF,            SEK_3},  /**< DEVICE_PTX_PL */
};

/** The address of the radio. Parameter to the radio init */
static code const uint8_t address[HAL_NRF_AW_5BYTES] = {0x22,0x33,0x44,0x55,0x01};

static state_t get_next_state(state_t current_state);

/** Function that runs in a loop until all buttons are released.
 */
static void wait_for_button_release(void);

/** Shows the state the state_machine is in.
 */
static void show_status(state_t operation);
/** the following function is for hardware device setup.
 */
void system_init (void);
/** Blinks the LED's to check the start device
 */
void device_boot_msg(void);
/** Blinks the LED's to check the start device
 */
void LED_ALL_OFF(void);
/** the following is for checking the buttons are pressed or not
 */
int B1_PRESSED(void);
/** the following is for checking the buttons are pressed or not
 */
int B2_PRESSED(void);
/** the following is for checking the buttons are pressed or not
 */
int B3_PRESSED(void);
/** the following is for turning on the corresponding LED
 */
void LED1_ON(void);
/** the following is for turning on the corresponding LED
 */
void LED2_ON(void);
/** the following is for turning on the corresponding LED
 */
void LED3_ON(void);
/** the following is for timing controll units
 */
void start_timer (uint16_t time);
/** the following is for timing controll units
 */
void wait_for_timer (void);
/** the following is for setting up the radio in SB mode
 */
void radio_sb_init (const uint8_t *address, hal_nrf_operation_mode_t operational_mode);
/** the following is for getting the radio status
 */
void radio_set_status (radio_status_t new_status);
/** the following is for receiving mode
 */
void device_prx_mode_sb(void);
/** the following is for radio setup
 */
void radio_irq(void);
/** the following is for getting the status of the radio
 */
radio_status_t radio_get_status (void);
/** the following is for getting timing value
 */
bool timer_done (void);
/** the following is for getting timing value
 */
uint8_t radio_get_pload_byte (uint8_t byte_index);
/** the following is for initialising the radio in esb mode
 */
void radio_esb_init (const uint8_t *address, hal_nrf_operation_mode_t operational_mode);
/** the following is for initialising the radio in pl mode
 */
void radio_pl_init (const uint8_t *address, hal_nrf_operation_mode_t operational_mode);
/** the following is for transmitting in SB mode
 */
void device_ptx_mode_sb(void);
/** this is to send a data in air
 */
void radio_send_packet(uint8_t *packet, uint8_t length);
/** the following is for transmitting in ESB mode
 */
void device_ptx_mode_esb(void);
/** the following is for receivingin ESB mode
 */
void device_prx_mode_esb(void);
/** the following is for transmitting in PL mode
 */
void device_ptx_mode_pl(void);
/** the following is for receivingin PL mode
 */
void device_prx_mode_pl(void);




void radio_send_packet(uint8_t *packet, uint8_t length)
{
 
  hal_nrf_write_tx_pload(packet, length);      // load message into radio
  
  //CE_PULSE();                                 // send packet // i dont know where to find this section yet

  radio_set_status (RF_BUSY);                 // trans. in progress; RF_BUSY

}


void radio_pl_init (const uint8_t *address, hal_nrf_operation_mode_t operational_mode)
{
  hal_nrf_close_pipe(HAL_NRF_ALL);               // First close all radio pipes
                                                 // Pipe 0 and 1 open by default
  hal_nrf_open_pipe(HAL_NRF_PIPE0, true);        // Then open pipe0, w/autoack 

  hal_nrf_set_crc_mode(HAL_NRF_CRC_16BIT);       // Operates in 16bits CRC mode
  hal_nrf_set_auto_retr(RF_RETRANSMITS, RF_RETRANS_DELAY);
                                                 // Enables auto retransmit.
                                                 // 3 retrans with 250ms delay

  hal_nrf_set_address_width(HAL_NRF_AW_5BYTES);  // 5 bytes address width
  hal_nrf_set_address(HAL_NRF_TX, address);      // Set device's addresses
  hal_nrf_set_address(HAL_NRF_PIPE0, address);   // Sets recieving address on 
                                                 // pipe0

/*****************************************************************************
 * Changed from esb/radio_esb.c                                              *
 * Enables:                                                                  *
 *  - ACK payload                                                            *
 *  - Dynamic payload width                                                  *
 *  - Dynamic ACK                                                            *
 *****************************************************************************/
  hal_nrf_enable_ack_pl();                       // Try to enable ack payload

  // When the features are locked, the FEATURE and DYNPD are read out 0x00
  // even after we have tried to enable ack payload. This mean that we need to
  // activate the features.
  if(hal_nrf_read_reg(FEATURE) == 0x00 && (hal_nrf_read_reg(DYNPD) == 0x00))
  {
    hal_nrf_lock_unlock ();                      // Activate features
    hal_nrf_enable_ack_pl();                     // Enables payload in ack
  }

  hal_nrf_enable_dynamic_pl();                   // Enables dynamic payload
  hal_nrf_setup_dyn_pl(ALL_PIPES);               // Sets up dynamic payload on
                                                 // all data pipes.
/*****************************************************************************
 * End changes from esb/radio_esb.c                                          *
 *****************************************************************************/
   
  if(operational_mode == HAL_NRF_PTX)            // Mode depentant settings
  {
    hal_nrf_set_operation_mode(HAL_NRF_PTX);     // Enter TX mode
  }
  else
  {
    hal_nrf_set_operation_mode(HAL_NRF_PRX);     // Enter RX mode
    hal_nrf_set_rx_pload_width((uint8_t)HAL_NRF_PIPE0, RF_PAYLOAD_LENGTH);
                                                 // Pipe0 expect 
                                                 // PAYLOAD_LENGTH byte payload
                                                 // PAYLOAD_LENGTH in radio.h
  }

  hal_nrf_set_rf_channel(RF_CHANNEL);            // Operating on static channel
                                                 // Defined in radio.h. 
                                                 // Frequenzy = 
                                                 //        2400 + RF_CHANNEL
  hal_nrf_set_power_mode(HAL_NRF_PWR_UP);        // Power up device
  
  start_timer(RF_POWER_UP_DELAY);                // Wait for the radio to 
  wait_for_timer();                              // power up
  
  radio_set_status (RF_IDLE);                    // Radio now ready
}


void radio_esb_init (const uint8_t *address, hal_nrf_operation_mode_t operational_mode)
{
  hal_nrf_close_pipe(HAL_NRF_ALL);               // First close all radio pipes
                                                 // Pipe 0 and 1 open by default
  hal_nrf_open_pipe(HAL_NRF_PIPE0, true);        // Then open pipe0, w/autoack
                                                 // Changed from sb/radio_sb.c

  hal_nrf_set_crc_mode(HAL_NRF_CRC_16BIT);       // Operates in 16bits CRC mode
  hal_nrf_set_auto_retr(RF_RETRANSMITS, RF_RETRANS_DELAY);                 
                                                 // Enables auto retransmit.
                                                 // 3 retrans with 250ms delay
                                                 // Changed from sb/radio_sb.c

  hal_nrf_set_address_width(HAL_NRF_AW_5BYTES);  // 5 bytes address width
  hal_nrf_set_address(HAL_NRF_TX, address);      // Set device's addresses
  hal_nrf_set_address(HAL_NRF_PIPE0, address);   // Sets recieving address on 
                                                 // pipe0
  
  if(operational_mode == HAL_NRF_PTX)            // Mode depentant settings
  {
    hal_nrf_set_operation_mode(HAL_NRF_PTX);     // Enter TX mode
  }
  else
  {
    hal_nrf_set_operation_mode(HAL_NRF_PRX);     // Enter RX mode
    hal_nrf_set_rx_pload_width((uint8_t)HAL_NRF_PIPE0, RF_PAYLOAD_LENGTH);
                                                 // Pipe0 expect 
                                                 // PAYLOAD_LENGTH byte payload
                                                 // PAYLOAD_LENGTH in radio.h
  }

  hal_nrf_set_rf_channel(RF_CHANNEL);            // Operating on static channel 
                                                 // Defined in radio.h.
                                                 // Frequenzy = 
                                                 //        2400 + RF_CHANNEL
  hal_nrf_set_power_mode(HAL_NRF_PWR_UP);        // Power up device

  start_timer(RF_POWER_UP_DELAY);                // Wait for the radio to 
  wait_for_timer();                              // power up
  
  radio_set_status (RF_IDLE);                     // Radio now ready

}

void radio_sb_init (const uint8_t *address, hal_nrf_operation_mode_t operational_mode)
{
  hal_nrf_close_pipe(HAL_NRF_ALL);               // First close all radio pipes
                                                 // Pipe 0 and 1 open by default
  hal_nrf_open_pipe(HAL_NRF_PIPE0, false);       // Open pipe0, without/autoack

  hal_nrf_set_crc_mode(HAL_NRF_CRC_16BIT);       // Operates in 16bits CRC mode
  hal_nrf_set_auto_retr(0, RF_RETRANS_DELAY);    // Disables auto retransmit

  hal_nrf_set_address_width(HAL_NRF_AW_5BYTES);  // 5 bytes address width
  hal_nrf_set_address(HAL_NRF_TX, address);      // Set device's addresses
  hal_nrf_set_address(HAL_NRF_PIPE0, address);   // Sets recieving address on 
                                                 // pipe0  
  
  if(operational_mode == HAL_NRF_PTX)            // Mode depentant settings
  {
    hal_nrf_set_operation_mode(HAL_NRF_PTX);     // Enter TX mode
  }
  else
  {
    hal_nrf_set_operation_mode(HAL_NRF_PRX);     // Enter RX mode
    hal_nrf_set_rx_pload_width((uint8_t)HAL_NRF_PIPE0, RF_PAYLOAD_LENGTH);
                                                 // Pipe0 expect 
                                                 // PAYLOAD_LENGTH byte payload
                                                 // PAYLOAD_LENGTH in radio.h
  }

  hal_nrf_set_rf_channel(RF_CHANNEL);            // Operating on static channel 
                                                 // Defined in radio.h. 
                                                 // Frequenzy = 
                                                 //        2400 + RF_CHANNEL
  hal_nrf_set_power_mode(HAL_NRF_PWR_UP);        // Power up device

//hal_nrf_set_datarate(HAL_NRF_1MBPS);           // Uncomment this line for 
                                                 // compatibility with nRF2401 
                                                 // and nRF24E1

  start_timer(RF_POWER_UP_DELAY);                // Wait for the radio to 
  wait_for_timer();                              // power up

  radio_set_status (RF_IDLE);                    // Radio now ready
}

void device_prx_mode_pl(void)
{
  while(true)
  { 
    // Setup and put the ACK payload on the FIFO
    pload_pl[0] = 0;

    if(B1_PRESSED())
    {
      pload_pl[0] = 1;
    }

    hal_nrf_write_ack_pload (0, pload_pl, RF_PAYLOAD_LENGTH);

    start_timer(110);
    
    // Run until either 110ms has lapsed 
    // OR there is data on the radio
    do
    {
      radio_irq ();
    } while ((radio_get_status () == RF_IDLE) && !timer_done());

    // Blink LED2 if ACK payload was sent, LED3 if not
    if ((radio_get_status ()) == RF_TX_DS
       || (radio_get_status ()) == RF_TX_AP)
    {
      LED2_BLINK();
    }
    else
    {
      LED3_BLINK();
    }

    if ((radio_get_status ()) == RF_RX_DR
       || (radio_get_status ()) == RF_TX_AP)
    {
      // Get the payload from the PTX and set LED1 accordingly
      if (radio_get_pload_byte (0) == 1)
      {
        LED1_ON();
      }
      else
      {
        LED1_OFF();
      }
    }
    else
    {
      LED1_OFF();
    }

    // Set radio status to idle
    radio_set_status (RF_IDLE);
  }

  EX0 = 1;

}

void device_ptx_mode_pl(void)
{
   while(true)
  {
    // Wait til the packet is sent
    do {
      radio_irq ();
    } while((radio_get_status ()) == RF_BUSY);

    // Blink LED2 if ACK is recieved, LED3 if not
    if (((radio_get_status ()) == RF_TX_DS) 
        || ((radio_get_status ()) == RF_TX_AP))
    {
      LED2_BLINK();
    }
    else
    {
      LED3_BLINK();
    }

    // If ACK payload was recieved, get the payload
    if (radio_get_status () == RF_TX_AP)
    {
      // Get the payload from the PRX and set LED1 accordingly
      if (radio_get_pload_byte (0) == 1)
      {
        LED1_ON();
      }
      else
      {
        LED1_OFF();
      }
    }

    // Sleep 100ms
    HAL_Delay(100);

    // Set up the payload according to the input button 1
    pload_pl[0] = 0;

    if(B1_PRESSED())
    {
      pload_pl[0] = 1;
    }

    //Send the packet
    radio_send_packet(pload_pl, RF_PAYLOAD_LENGTH);           
  }

}

void device_prx_mode_esb(void)
{
  while(true)
  { 
    start_timer(110);

    // Run until either 110ms has lapsed 
    // OR there is data on the radio
    do
    {
      radio_irq ();
    } while ((radio_get_status () == RF_IDLE) && !timer_done());
    
    if ((radio_get_status ()) == RF_RX_DR)
    {
      // Get the payload from the PTX and set LED1
      if (radio_get_pload_byte (0) == 1)
      {
        LED1_ON();
      }
      else
      {
        LED1_OFF();
      }
    }
    else
    {
      LED1_OFF();
    }

    // Set radio status to idle
    radio_set_status (RF_IDLE);
  }

}


void device_ptx_mode_esb(void)
{
  while(true)
  {
    // Wait til the packet is sent
    do {
      radio_irq ();
    } while((radio_get_status ()) == RF_BUSY);

    // Blink LED2 if ACK is recieved, LED3 if not
    if (((radio_get_status ()) == RF_TX_DS))
    {
      LED2_BLINK();
    }
    else
    {
      LED3_BLINK();
    }

    // Sleep 100ms
    start_timer(100);
    wait_for_timer();

    // Set up the payload according to the input button 1
    pload_esb[0] = 0;

    if(B1_PRESSED())
    {
      pload_esb[0] = 1;
    }

    //Send the packet
    radio_send_packet(pload_esb, RF_PAYLOAD_LENGTH);           
  }


}

void device_ptx_mode_sb(void)
{
  while(true)
  {
    // Wait til the packet is sent
    do {
      radio_irq ();
    } while((radio_get_status ()) == RF_BUSY);

    // Sleep 100ms
    start_timer(100);
    wait_for_timer();

    // Set up the payload according to the input button 1
    pload_sb[0] = 0;

    if(B1_PRESSED())
    {
      pload_sb[0] = 1;
    }

    //Send the packet
    radio_send_packet(pload_sb, RF_PAYLOAD_LENGTH);           
  }

}


void device_prx_mode_sb(void)
{
  while(true)
  { 
    start_timer(110);

    // Run until either 110ms has lapsed 
    // OR there is data on the radio
    do
    {
      radio_irq ();
    } while ((radio_get_status() == RF_IDLE) && !timer_done());

    if ((radio_get_status ()) == RF_RX_DR)
    {
      // Get the payload from the PTX and set LED1 accordingly
      if (radio_get_pload_byte(0) == 1)
      {
        LED1_ON();
      }
      else
      {
        LED1_OFF();
      }
    }
    else
    {
      LED1_OFF();
    }

    // Set radio status to idle
    radio_set_status(RF_IDLE);
  }

}

uint8_t radio_get_pload_byte (uint8_t byte_index)
{
  return pload[byte_index];
}


bool timer_done (void)
{
  bool retval = false;

  if (TIMER1_OVERFLOW())
  {
    timer_rounds--;

    if (timer_rounds > 0)
    {
      run_timer (MAX_TIME);
    }
    else
    {
      retval = true;
      T1_STOP();
    }
  }

  return retval;

}

radio_status_t radio_get_status (void)
{
return status;
}


 void radio_irq(void)
{
  if (RADIO_ACTIVITY())                         // Check if an interupt is
  {                                             // triggered
    switch(hal_nrf_get_clear_irq_flags ())
    {
      case (1<<HAL_NRF_MAX_RT):                 // Max retries reached
        hal_nrf_flush_tx();                     // flush tx fifo, avoid fifo jam
        radio_set_status (RF_MAX_RT);
        break;
      
      case (1<<HAL_NRF_TX_DS):                  // Packet sent
        radio_set_status (RF_TX_DS);
        break;
      
      case (1<<HAL_NRF_RX_DR):                  // Packet received
        while (!hal_nrf_rx_fifo_empty ())
        {
          hal_nrf_read_rx_pload(pload);
        }
        radio_set_status (RF_RX_DR);
        break;
  
      case ((1<<HAL_NRF_RX_DR)|(1<<HAL_NRF_TX_DS)): // Ack payload recieved
        while (!hal_nrf_rx_fifo_empty ())
        {
          hal_nrf_read_rx_pload(pload);
        }
        radio_set_status (RF_TX_AP);
        break;
  
      default:
        break;    
    }

    RESET_RADIO_ACTIVITY();
  }

}

void radio_set_status (radio_status_t new_status)
{
  status = new_status;
}

static void run_timer (uint16_t time)
{
  if (time != 0)
  {
    T1_MODE1(); // Setting up mode 1 on timer 1 (16-bit timer) 
    T1_SET_LB((uint8_t)time);
    T1_SET_HB((uint8_t)(time >> 8));
    T1_START();
  }

}

void wait_for_timer (void)
{
  while (timer_rounds > 0)
  {
    while (!TIMER1_OVERFLOW())
      ;

    timer_rounds--;

    if (timer_rounds > 0)
    {
      run_timer (MAX_TIME);
    }
  }

  T1_STOP();


}


void start_timer (uint16_t time)
{
  uint16_t setuptime;
  uint16_t firstruntime;

  firstruntime = (uint16_t)(time % MAX_RUNTIME);

  setuptime = 0 - (firstruntime * CYCLES_PR_MS);
  time -= firstruntime;
  timer_rounds = (uint8_t)(time / MAX_RUNTIME) + 1;

  if (setuptime == 0)
  {
    setuptime = MAX_TIME;
    timer_rounds--;
  }

  run_timer (setuptime);
}


void LED1_ON(void)
{
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,1);
}

void LED2_ON(void)
{
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,1);
}         

void LED3_ON(void)
{
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1);
}  

int B1_PRESSED(void)
{
 pinState1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3);
	if(pinState1==0)
	{
	return 1;
	}
	else
	{
	return 0;
	}	
}

int B2_PRESSED(void)
{
 pinState2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
	if(pinState2==0)
	{
	return 1;
	}
	else
	{
	return 0;
	}	
}

int B3_PRESSED(void)
{
 pinState3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
	if(pinState3==0)
	{
	return 1;
	}
	else
	{
	return 0;
	}	
}

void LED_ALL_OFF(void)
{
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,0);
}

void device_boot_msg(void)
{
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,1);
  HAL_Delay(500);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,1);
  HAL_Delay(500);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1);
  HAL_Delay(500);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,0);
  HAL_Delay(500);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,1);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,1);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,1);
  HAL_Delay(500);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,0);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,0);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,0);
}  



/** the following function is for system clock configuration, if the mcu is resetting we need to remove this
 */
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/** this section here is for setting the three buttons input and 3 LED's*/
static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();	

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSNpin_Pin|CEpin_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CSNpin_Pin CEpin_Pin */
  GPIO_InitStruct.Pin = CSNpin_Pin|CEpin_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin = (GPIO_PIN_0| GPIO_PIN_1 |GPIO_PIN_2);
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.Alternate = 0;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	GPIO_InitTypeDef  GPIO_InitStruct;
	GPIO_InitStruct.Pin = (GPIO_PIN_3| GPIO_PIN_4 |GPIO_PIN_5);
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.Alternate = 0;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	printf("Switches and LED's initialised successfully\n");
}

/** this section here is for setting Controller in SPI mode*/
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }
	printf("SPI initialised successfully\n");

}


/** this section here is for setting the USART which can be used or not*/
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }
	printf("USART initialised successfully\n");

}



void system_init (void)
{
  SystemClock_Config();	
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_USART2_UART_Init();
	printf("Device initialised successfully\n");
}


static state_t get_next_state (state_t current_state)
{
  state_t next_state = NO_CHANGE;

  if (B1_PRESSED())                  // Swap state according to state_machine 
  {                                  // array with button input and 
                                     // current_state as input
     next_state = state_machine[current_state][0];
  }
  else if (B2_PRESSED())
  {
     next_state = state_machine[current_state][1];
  }
  else if (B3_PRESSED())
  {
     next_state = state_machine[current_state][2];
  }

  if (next_state == NO_CHANGE)      // If no statechange should occur, return 
  {                                 // previous state
    next_state = current_state;
  }
  else                              // As it takes some time for the button to
  {                                 // stabalise as pressed, give it a short 
    delay_10ms();                   // delay to stabalise
  }

  return next_state;
}

static void wait_for_button_release (void)
{
  while (B1_PRESSED() || B2_PRESSED() || B3_PRESSED())  // Wait until all 
    ;                                                   // buttons are released
  delay_10ms();                                         // Delay to stabalise
}

static void show_status (state_t operation)
{
  uint16_t time;
  LED_ALL_OFF();

  if (show_state[operation][0] == ON)
  {
    LED1_ON();
  }
  if (show_state[operation][1] == ON)
  {
    LED2_ON();
  } 
  if (show_state[operation][2] == ON)
  {
    LED3_ON();
  } 

  // If there is to be a delay where LED's are shown, but no input is
  // accepted, delay for the period indicated in show_state[operation][4]
  if (show_state[operation][4] > 0)
  {
    time = (uint16_t)(show_state[operation][4] * 100);
    start_timer(time);
    wait_for_timer();
  }

  // If the radio goes into an operational mode, all LED's should be turned off
  // before entering that mode
  if (show_state[operation][3] == OFF)
  {
    LED_ALL_OFF();
  } 
}



void main(void) 
{
  state_t current_state = DEVICE_IDLE;

  system_init();                  //Hardware dependant system initialisation
  device_boot_msg();              //Flashes LED's in a simple pattern

 // GLOBAL_INT_ENABLE();            //Ensure that all interupts are turned on // this shoul be added in the last if needed

  LED_ALL_OFF();                  //Turn off all lights
 
  wait_for_button_release ();     //Ensure that all buttons are released

  //Implemenation of a simple state machine. 
  while (true)
  {
    current_state = get_next_state (current_state);// Go to next state 
    wait_for_button_release ();                    // Ensure that all 
                                                   // buttons are released
    show_status (current_state);
    
    switch (current_state)
    {
      case DEVICE_IDLE:                       // No operation chosen yet
        break;

      case DEVICE_PRX_IDLE:                   // In PRX mode, but still lack 
        break;                                // functionality

      case DEVICE_PTX_IDLE:                   // In PTX mode, but still lack 
        break;                                // functionality

      case DEVICE_PRX_SB:                     // Start as PRX in ShockBurst 
        radio_sb_init (address, HAL_NRF_PRX);
        device_prx_mode_sb ();
        break;

      case DEVICE_PRX_ESB:                    // Start as PRX in Enhanced 
        radio_esb_init (address, HAL_NRF_PRX);// ShockBurst
        device_prx_mode_esb ();
        break;

      case DEVICE_PRX_PL:                     //Start as PRX in Enhanced 
        radio_pl_init (address, HAL_NRF_PRX); //ShockBurst with ACK payload
        device_prx_mode_pl ();
        break;

      case DEVICE_PTX_SB:                     //Start as PTX in ShockBurst
        radio_sb_init (address, HAL_NRF_PTX);
        device_ptx_mode_sb ();
        break;

      case DEVICE_PTX_ESB:                    //Start as PTX in Enhanced 
        radio_esb_init (address, HAL_NRF_PTX);//ShockBurst
        device_ptx_mode_esb ();
        break;

      case DEVICE_PTX_PL:                     // Start as PTX in Enhanced 
        radio_pl_init (address, HAL_NRF_PTX); // ShockBurst with ACK payload
        device_ptx_mode_pl ();
        break;

      default:                                // If in an illegal state, set to
        current_state = DEVICE_IDLE;       // default state (DEVICE_IDLE)
        break;
    }
  }
}


